{
  "version": 3,
  "file": "registration.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "registration.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {Request} from \"../models/message/request\";\nimport {Contact} from \"../models/common/contact\";\nimport {Transport} from \"../transport\";\nimport {Uri} from \"../models/common/uri\";\nimport {Util} from \"../models/common/utils\";\nimport {Sequence} from \"../models/common/sequence\";\nimport {Message} from \"../models/message\";\nimport {Response} from \"../models/message/response\";\nimport {Station} from \"../station\";\nimport {Challenge} from \"../models/common/challenge\";\nimport {Event} from \"../models/common/event\";\n\nexport class RegisterRequest extends Request {\n    constructor(contact:Contact,expires=3600){\n        super({\n            method          : \"REGISTER\",\n            uri             : contact.uri.server,\n            from            : contact,\n            to              : contact.clone('name,uri'),\n            expires         : expires,\n            callId          : Util.guid(),\n            maxForwards     : 70,\n            supported       : ['outbound','100rel','path'],\n            allow           : ['INVITE','ACK','CANCEL','BYE','REFER','NOTIFY','MESSAGE','SUBSCRIBE','INFO'],\n            sequence        : new Sequence({\n                method      : \"REGISTER\",\n                value       : 1\n            }),\n            contentLength   : 0\n        });\n    }\n}\nexport class SubscribeRequest extends Request{\n    constructor(contact:Contact,address:Contact){\n        super({\n            method          : \"SUBSCRIBE\",\n            uri             : contact.uri,\n            from            : contact,\n            to              : contact.clone('name,uri'),\n            contact         : address,\n            callId          : Util.guid(),\n            expires         : 300,\n            event           : new Event({\n                type        : 'message-summary'\n            }),\n            sequence        : new Sequence({\n                method      : \"SUBSCRIBE\",\n                value       : 1\n            }),\n            maxForwards     : 70,\n            contentLength   : 0\n        });\n    }\n}\nexport class RegisterDialog {\n\n    private station:Station;\n    private request:Request;\n    private challenge:Challenge;\n\n    private get address():Contact {\n        return this.station.address;\n    }\n    private get contact():Contact {\n        return this.station.contact;\n    }\n    constructor(station:Station){\n        this.station = station;\n        this.onResponse = this.onResponse.bind(this);\n        this.onRequest = this.onRequest.bind(this);\n        this.station.on('request',this.onRequest);\n    }\n    sign(request:Request){\n        if(this.challenge) {\n            request.authorization = this.challenge.authorize(request,\n                this.station.contact.uri.username,\n                this.station.contact.uri.password\n            );\n        }\n    }\n\n    register(expires){\n        return this.doRegister(expires);\n    }\n    doRegister(expires){\n        return new RegisterRequest(this.contact,expires).send(this.station.transport);\n    }\n    doSubscribe(){\n        return Promise.resolve(true);\n        //return new SubscribeRequest(this.contact,this.address).send(this.station.transport);\n    }\n    sendNotifyOk(message:Request){\n        var response = new Response({\n            status          : 200,\n            message         : \"OK\",\n            via             : message.via,\n            from            : message.from,\n            to              : message.to,\n            callId          : message.callId,\n            expires         : 3600,\n            sequence        : message.sequence,\n            contentLength   : 0\n        });\n        this.station.transport.send(response);\n    }\n    onRequest(message:Request){\n        if(message.method==\"NOTIFY\"){\n            this.sendNotifyOk(message)\n        }\n    }\n    onResponse(message:Response){\n        if(message.callId == this.request.callId){\n            if(message.status == 401){\n                this.challenge = message.authenticate;\n                if(!this.request.authorization){\n                    this.sign(this.request);\n                    this.request.sequence.value++;\n                    this.station.transport.send(this.request);\n                }else{\n                    console.info(`Invalid credentials for ${this.station.contact}`);\n                }\n            }else\n            if(message.status == 200){\n                if(this.request.method==\"REGISTER\"){\n                    this.doSubscribe();\n                }else\n                if(this.request.method==\"NOTIFY\"){\n                    this.station.emit('register')\n                }\n            }\n        }\n    }\n\n}"
  ]
}