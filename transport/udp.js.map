{
  "version": 3,
  "file": "udp.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "udp.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {Message} from \"../models/message\";\nimport {Util} from \"../models/common/utils\";\nimport {Transport} from \"./transport\";\nimport Node from \"../node\";\n\nexport class UdpTransport extends Transport {\n    public get debug():boolean{\n        return false;\n    }\n    public get connected():boolean{\n        return !!this.socket;\n    }\n    public get protocol():string{\n        return 'UDP';\n    }\n    public send(message:Message){\n        if(this.connected){\n            super.send(message);\n        }else{\n            this.queue.push(message);\n        }\n    }\n\n    protected socket:any;\n    protected queue:Message[];\n    protected doInit(){\n        this.queue=[];\n        this.doConnect();//6028928700\n    }\n    protected doConnect(){\n        Util.getLocalIpAddress().then(local=>{\n            this.uri.host = local;\n            this.socket = Node.Udp.createSocket(\"udp4\");\n            this.socket.on('error',this.onError.bind(this));\n            this.socket.on('listening',this.onConnect.bind(this));\n            this.socket.bind(this.localPort||5060,local);\n        }).catch(e=>console.info(e));\n    }\n    protected onConnect(){\n        this.socket.once('close',this.onClose.bind(this));\n        this.socket.on('message',this.processor);\n        this.via.host = this.localAddress;\n        this.via.port = this.localPort;\n        this.socket['connected'] = true;\n        this.emit('connect',this);\n        while(this.queue.length){\n            this.send(this.queue.shift());\n        }\n    }\n    protected onError(error){\n        this.emit('error',error,this);\n        this.onClose()\n    }\n    protected onClose(){\n        this.doDestroy();\n        this.emit('disconnect',this);\n    }\n    protected doDestroy(){\n        if(this.socket) {\n            this.socket = null;\n        }\n    }\n    protected doSend(buffer:Buffer){\n        this.socket.send(buffer,0,buffer.length,this.remotePort,this.remoteAddress);\n    }\n}\n"
  ]
}