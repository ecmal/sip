{
  "version": 3,
  "file": "tcp.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "tcp.ts"
  ],
  "names": [],
  "mappings": ";;IAIA;QACI,sBAAW,+BAAK;iBAAhB;gBACI,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;;;WAAA;QACD,sBAAW,kCAAQ;iBAAnB;gBACI,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;;;WAAA;QACD,sBAAW,mCAAS;iBAApB;gBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACpC,CAAC;;;WAAA;QACM,2BAAI,GAAX,UAAY,OAAe;YACvB,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC;gBACf,iBAAK,CAAC,IAAI,YAAC,OAAO,CAAC,CAAC;YACxB,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC;QAGS,6BAAM,GAAhB;YAAA,iBAOC;YANG,IAAI,CAAC,KAAK,GAAC,EAAE,CAAC;YACd,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAC;gBAC7B,IAAI,EAAC,EAAC,GAAG,EAAC,cAAI,OAAA,KAAI,CAAC,MAAM,CAAC,YAAY,IAAE,SAAS,EAAnC,CAAmC,EAAC;gBAClD,IAAI,EAAC,EAAC,GAAG,EAAC,cAAI,OAAA,KAAI,CAAC,MAAM,CAAC,SAAS,IAAE,IAAI,EAA3B,CAA2B,EAAC;aAC7C,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC;QACS,gCAAS,GAAnB;YACI,IAAI,CAAC,MAAM,GAAG,cAAI,CAAC,GAAG,CAAC,OAAO,CAAM;gBAChC,IAAI,EAAU,IAAI,CAAC,aAAa;gBAChC,IAAI,EAAU,IAAI,CAAC,UAAU;aAChC,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACpD,CAAC;QACS,gCAAS,GAAnB;YACI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YACzC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,CAAC;YAC1B,OAAM,IAAI,CAAC,KAAK,CAAC,MAAM,EAAC,CAAC;gBACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;YAClC,CAAC;QACL,CAAC;QACS,8BAAO,GAAjB,UAAkB,KAAK;YACnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAC,KAAK,EAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,OAAO,EAAE,CAAA;QAClB,CAAC;QACS,8BAAO,GAAjB;YACI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACS,gCAAS,GAAnB;YACI,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACvB,CAAC;QACL,CAAC;QACS,6BAAM,GAAhB,UAAiB,MAAa;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC;;;;QACL,mBAAC;QA/DD;YAAkC,+BAAS;QA+D3C,CAAC;IAAD,CAAC,AA/DD,IA+DC;;IA/DD,2CA+DC,CAAA;;;;;;;;;;;;;;;;YA/DD,2BAAA,aAAkC,qBA+DjC",
  "sourcesContent": [
    "import {Message} from \"../models/message\";\nimport {Util} from \"../models/common/utils\";\nimport {Transport} from \"./transport\";\nimport Node from \"../node\";\nexport class TcpTransport extends Transport {\n    public get debug():boolean{\n        return false;\n    }\n    public get protocol():string{\n        return 'TCP';\n    }\n    public get connected():boolean{\n        return this.socket['connected'];\n    }\n    public send(message:Message){\n        if(this.connected){\n            super.send(message);\n        }else{\n            this.queue.push(message);\n        }\n    }\n    protected socket:any;\n    protected queue:Message[];\n    protected doInit(){\n        this.queue=[];\n        Object.defineProperties(this.uri,{\n            host:{get:()=>this.socket.localAddress||'0.0.0.0'},\n            port:{get:()=>this.socket.localPort||5060}\n        });\n        this.doConnect();\n    }\n    protected doConnect(){\n        this.socket = Node.Net.connect(<any>{\n            host        : this.remoteAddress,\n            port        : this.remotePort\n        });\n        this.socket.once('connect',this.onConnect.bind(this));\n        this.socket.on('error',this.onError.bind(this));\n    }\n    protected onConnect(){\n        this.socket.once('close',this.onClose.bind(this));\n        this.socket.on('data',this.processor);\n        this.via.host = this.socket.localAddress;\n        this.via.port = this.socket.localPort;\n        this.socket['connected'] = true;\n        this.emit('connect',this);\n        while(this.queue.length){\n            this.send(this.queue.shift());\n        }\n    }\n    protected onError(error){\n        this.emit('error',error,this);\n        this.onClose()\n    }\n    protected onClose(){\n        this.doDestroy();\n        this.emit('disconnect',this);\n    }\n    protected doDestroy(){\n        if(this.socket) {\n            this.socket.destroy();\n            this.socket = null;\n        }\n    }\n    protected doSend(buffer:Buffer){\n        this.socket.write(buffer);\n    }\n}\n"
  ]
}