{
  "version": 3,
  "file": "model.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "model.ts"
  ],
  "names": [],
  "mappings": ";;IAEA;QAEkB,SAAG,GAAjB,UAAkB,IAAI;YAClB,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,CAAC;gBACd,MAAM,CAAC,cAAc,CAAC,KAAK,EAAC,QAAQ,EAAM;oBACtC,KAAK,EAAE,eAAM;iBAChB,CAAC,CAAA;YACN,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QAUD,mBAAG,GAAH,UAAI,IAAQ;YACR,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAA,CAAC;gBACjB,EAAE,CAAA,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAE,WAAW,CAAC,CAAA,CAAC;oBAC9B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;gBACrB,CAAC;YACL,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,uBAAO,GAAP;YACI,MAAM,CAAI,IAAI,CAAC,WAAW,CAAC,IAAI,SAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAC,IAAI,EAAC,CAAC,CAAC,MAAG,CAAC;QACtE,CAAC;QACD,wBAAQ,GAAR,UAAS,OAAY;YACjB,MAAM,CAAI,IAAI,CAAC,WAAW,CAAC,IAAI,SAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAC,IAAI,EAAC,CAAC,CAAC,MAAG,CAAC;QACtE,CAAC;QACD,qBAAK,GAAL,UAAM,MAAc;YAChB,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACtD,EAAE,CAAA,CAAC,MAAM,CAAC,CAAA,CAAC;gBACP,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAE,OAAA,CAAC,CAAC,IAAI,EAAE,EAAR,CAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,EAAC,CAAC,EAAC,CAAC,IAAG,OAAA,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAE,CAAC,EAAf,CAAe,CAAC,CAAC;gBACtF,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAA,CAAC;oBACnB,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAC,CAAC,CAAC,CAAA,CAAC;wBACpB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvB,CAAC;gBACL,CAAC;YACL,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACL,YAAC;QArCG,eAAY,IAAK;YACb,MAAM,CAAC,cAAc,CAAC,IAAI,EAAC,OAAO,EAAM;gBACpC,UAAU,EAAC,KAAK;gBAChB,KAAK,EAAC,IAAI,CAAC,WAAW,CAAC,IAAI;aAC9B,CAAC,CAAC;YACH,EAAE,CAAA,CAAC,IAAI,CAAC,CAAA,CAAC;gBACL,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACL,CAAC;IA6BL,CAAC,AA/CD,IA+CC;;IA/CD,6BA+CC,CAAA;;;;;;;YA/CD,oBAAA,KA+CC",
  "sourcesContent": [
    "import {Parser} from \"../parser\";\n\nexport class Model  {\n    protected static parser:any;\n    public static new(text):Model{\n        if(!Model.parser){\n            Object.defineProperty(Model,'parser',<any>{\n                value: Parser\n            })\n        }\n        return Model.parser.parse(text,this);\n    }\n    constructor(data?){\n        Object.defineProperty(this,'class',<any>{\n            enumerable:false,\n            value:this.constructor.name\n        });\n        if(data){\n            this.set(data);\n        }\n    }\n    set(data:any){\n        for(var key in data){\n            if(typeof data[key]!='undefined'){\n                this[key] = data[key];\n            }else{\n                delete this[key];\n            }\n        }\n        return this;\n    }\n    inspect(){\n        return `${this.constructor.name}(${JSON.stringify(this,null,2)})`;\n    }\n    toString(options?:any){\n        return `${this.constructor.name}(${JSON.stringify(this,null,2)})`;\n    }\n    clone(select?:string){\n        var object = this.constructor['new'](this.toString());\n        if(select){\n            var keys = select.trim().split(',').map(k=>k.trim()).filter((k,i,a)=>a.indexOf(k)==i);\n            for(var key in object){\n                if(keys.indexOf(key)<0){\n                    delete object[key];\n                }\n            }\n        }\n        return object;\n    }\n}\n"
  ]
}