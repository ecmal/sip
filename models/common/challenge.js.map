{
  "version": 3,
  "file": "challenge.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "challenge.ts"
  ],
  "names": [],
  "mappings": ";;IAMA;QAsBI,6BAAS,GAAT,UAAU,OAAe,EAAC,QAAe,EAAC,QAAe;YACrD,IAAI,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;YACrB,IAAI,EAAE,GAAG,CAAC,SAAS,GAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzD,IAAI,GAAG,GAAC,YAAI,CAAC,GAAG,CAAC,QAAQ,GAAC,GAAG,GAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAC,GAAG,GAAC,QAAQ,CAAC,CAAC;YAC9D,IAAI,GAAG,GAAC,YAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,GAAC,GAAG,GAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5D,IAAI,QAAQ,GAAI,YAAI,CAAC,GAAG,CAAC,GAAG,GAAC,GAAG,GAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAC,GAAG,GAAC,EAAE,GAAC,GAAG,GAAC,MAAM,GAAC,GAAG,GAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAC,GAAG,GAAC,GAAG,CAAC,CAAC;YAClG,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC;gBAC1B,IAAI,EAAK,IAAI,CAAC,IAAI;gBAClB,MAAM,EAAG;oBACL,KAAK,EAAS,IAAI,CAAC,MAAM,CAAC,KAAK;oBAC/B,KAAK,EAAS,IAAI,CAAC,MAAM,CAAC,KAAK;oBAC/B,GAAG,EAAW,IAAI,CAAC,MAAM,CAAC,GAAG;oBAC7B,SAAS,EAAK,IAAI,CAAC,MAAM,CAAC,SAAS;oBACnC,GAAG,EAAW,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;oBACpC,QAAQ,EAAM,QAAQ;oBACtB,MAAM,EAAQ,MAAM;oBACpB,EAAE,EAAY,EAAE;oBAChB,QAAQ,EAAM,QAAQ;iBACzB;aACJ,CAAC,CAAC;YACH,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAC;gBACnB,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;YAChD,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,4BAAQ,GAAR,UAAS,OAAY;YAArB,iBAQC;YAPG,MAAM,CAAI,IAAI,CAAC,IAAI,SAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;gBACjD,EAAE,CAAA,CAAC,CAAC,WAAW,EAAC,OAAO,EAAC,IAAI,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAA,CAAC;oBAC/C,MAAM,CAAI,CAAC,SAAI,KAAI,CAAC,MAAM,CAAC,CAAC,CAAG,CAAA;gBACnC,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,MAAM,CAAI,CAAC,WAAK,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAG,CAAA;gBACrC,CAAC;YACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;QACnB,CAAC;;;;QACL,gBAAC;QAzCG,mBAAY,IAAK;YACb,mBAAM,IAAI,CAAC,CAAC;YACZ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YACZ,IAAI,CAAC,EAAE,GAAG,YAAI,CAAC,IAAI,EAAE,CAAC;QAC1B,CAAC;IAqCL,CAAC,AA1DD,IA0DC;;IA1DD,qCA0DC,CAAA;;;;;;;;;;;;;;;;YA1DD,wBAAA,UAA+B,aA0D9B",
  "sourcesContent": [
    "import {Model} from \"../model\";\nimport {Util} from \"./utils\";\nimport {Uri} from \"./uri\";\nimport {Request} from \"../message/request\";\n\n\nexport class Challenge extends Model {\n    public type:string;\n    public params:any;\n\n    //Authorization: Digest\n    // username=\"102\",\n    // realm=\"win.freedomdebtrelief.com\",\n    // nonce=\"33013310c380f48dff5561ac6d2a077a\",\n    // uri=\"sip:win.freedomdebtrelief.com;transport=TCP\",\n    // response=\"\",\n    // cnonce=\"5e08d57725feeaf0c2ee922419715974\",\n    // nc=00000001,\n    // qop=auth,\n    // algorithm=MD5,\n    // opaque=\"00000041\"\n    private cn:string;\n    private nc:number;\n    constructor(data?){\n        super(data);\n        this.nc = 1;\n        this.cn = Util.guid();\n    }\n    authorize(request:Request,username:string,password:string):Challenge{\n        var cnonce = this.cn;\n        var nc = (100000000+(this.nc++)).toString().substring(1);\n        var HA1=Util.md5(username+':'+this.params.realm+':'+password);\n        var HA2=Util.md5(request.method+':'+request.uri.toString());\n        var response =  Util.md5(HA1+':'+this.params.nonce+':'+nc+':'+cnonce+':'+this.params.qop+':'+HA2);\n        var challenge = new Challenge({\n            type   : this.type,\n            params : {\n                realm       : this.params.realm,\n                nonce       : this.params.nonce,\n                qop         : this.params.qop,\n                algorithm   : this.params.algorithm,\n                uri         : request.uri.toString(),\n                username    : username,\n                cnonce      : cnonce,\n                nc          : nc,\n                response    : response\n            }\n        });\n        if(this.params.opaque){\n            challenge.params.opaque = this.params.opaque\n        }\n\n        return challenge;\n    }\n\n    toString(options?:any){\n        return `${this.type} ${Object.keys(this.params).map(k=>{\n            if(['algorithm','stale','nc','qop'].indexOf(k)>=0){\n                return `${k}=${this.params[k]}`\n            }else{\n                return `${k}=\"${this.params[k]}\"`\n            }\n        }).join(',')}`;\n    }\n}"
  ]
}