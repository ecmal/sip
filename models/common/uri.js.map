{
  "version": 3,
  "file": "uri.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "uri.ts"
  ],
  "names": [],
  "mappings": ";;IAEA;QAWI,sBAAQ,GAAR,UAAS,IAAI,EAAC,KAAK;YACf,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;gBACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YACrC,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAC,KAAK,CAAC;QAC5B,CAAC;QACD,sBAAQ,GAAR,UAAS,IAAI;YACT,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;gBACZ,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC;QAaD,sBAAI,uBAAM;iBAAV;gBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;YAChD,CAAC;;;WAAA;QACD,sBAAQ,GAAR,UAAS,OAAc;YAAvB,iBAMC;YANQ,uBAAc,GAAd,YAAc;YACnB,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAE,CAAC,OAAO,CAAC,OAAO,IAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAC,IAAI,CAAC,QAAQ,GAAC,EAAE,CAAE,GAAE,GAAG,GAAE,EAAE,CAAC,CAAC;YACvH,IAAI,MAAM,GAAG,KAAG,IAAI,CAAC,IAAI,IAAG,IAAI,CAAC,IAAI,GAAC,GAAG,GAAC,IAAI,CAAC,IAAI,GAAC,EAAE,CAAE,CAAC;YACzD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAE,OAAA,OAAI,CAAC,IAAG,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAC,GAAG,GAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAC,EAAE,EAAE,EAA9C,CAA8C,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAC,EAAE,CAAC;YACrH,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,GAAC,GAAG,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAE,OAAA,CAAG,CAAC,SAAI,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAE,EAAxB,CAAwB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAC,EAAE,CAAC;YACvG,MAAM,CAAI,IAAI,CAAC,MAAM,SAAI,SAAS,GAAG,MAAM,GAAG,MAAM,GAAG,OAAS,CAAC;QACrE,CAAC;;;;QACL,UAAC;QArBG,aAAY,IAAK;YACb,mBAAM,IAAI,CAAC,CAAC;YACZ,EAAE,CAAA,CAAC,OAAO,IAAI,IAAG,QAAQ,CAAC,CAAA,CAAC;gBACvB,MAAM,CAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YAC7B,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,mBAAM,IAAI,CAAC,CAAC;YAChB,CAAC;YACD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;gBACb,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;YACvB,CAAC;QACL,CAAC;IAWL,CAAC,AA5CD,IA4CC;;IA5CD,yBA4CC,CAAA;;;;;;;YA5CD,kBAAA,IAAyB,aA4CxB",
  "sourcesContent": [
    "import {Model} from \"../model\";\n\nexport class Uri extends Model {\n\n    scheme:string;\n    username:string;\n    password:string;\n    host:string;\n    port:number;\n    params:any;\n    headers:any;\n\n    \n    setParam(name,value){\n        if(!this.params){\n            this.params = Object.create(null)\n        }\n        this.params[name]=value;\n    }\n    getParam(name):any{\n        if(this.params){\n            return this.params[name];\n        }\n    }\n\n    constructor(data?){\n        super(data);\n        if(typeof data =='string'){\n            return <Uri>Uri.new(data)\n        }else{\n            super(data);\n        }\n        if(!this.scheme){\n            this.scheme = 'sip'\n        }\n    }\n    get server():Uri{\n        return this.clone('scheme,host,port,params')\n    }\n    toString(options:any={}){\n        var authority = (this.username ? this.username + ( (options.inspect&&this.password) ? ':'+this.password:'' ) +'@': '');\n        var server = `${this.host}${this.port?':'+this.port:''}`;\n        var params = this.params?Object.keys(this.params).map(k=>`;${k}${this.params[k]?'='+this.params[k]:''}`).join(''):'';\n        var headers = this.headers?'?'+Object.keys(this.headers).map(k=>`${k}=${this.params[k]}`).join('&'):'';\n        return `${this.scheme}:${authority}${server}${params}${headers}`;\n    }\n}"
  ]
}