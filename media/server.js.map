{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "server.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {Util} from \"../models/common/utils\";\nimport {Call} from \"../dialogs/invitation/call\";\nimport {Sdp} from \"../models/common/sdp\";\nimport {RtpPacket} from \"./rtp\";\nimport {RtcpPacket} from \"./rtcp\";\nimport Node from \"../node\";\n\n\nconst process = system.node.process;\n\n\nexport class MediaServer {\n    static calls:{[k:string]:Call} = Object.create(null);\n    static RTP_PORT = 18089;\n    static RTCP_PORT = 18090;\n\n    static listenTo(call:Call){\n        call.on(\"audio:start\",(port,host)=>{\n            MediaServer.calls[`${host}:${port}`] = call;\n        });\n        call.on(\"audio:stop\",(port,host,nPort,nHost)=>{\n            delete MediaServer.calls[`${host}:${port}`];\n        });\n        call.on(\"audio:update\",(port,host,oPort,oHost)=>{\n            delete MediaServer.calls[`${oPort}:${oPort}`];\n            MediaServer.calls[`${host}:${port}`] = call;\n        });\n        return call.localSdp = new Sdp({\n            version             : 0,\n            origin              : {\n                username        : call.localUsername,\n                sessionId       : Util.random()&0xFFFFFF,\n                sessionVersion  : Util.random()&0xFFFFFF,\n                networkType     : \"IN\",\n                addressType     : \"IP4\",\n                unicastAddress  : this.instance.host\n            },\n            sessionName: call.localUsername,\n            connection: {\n                networkType: \"IN\",\n                addressType: \"IP4\",\n                connectionAddress: this.instance.host\n            },\n            timing: {\n                start: 0,\n                stop: 0\n            },\n            media: [\n                {\n                    type        : \"audio\",\n                    port        : this.instance.rtpPort,\n                    protocol    : \"RTP/AVP\",\n                    payloads    : [\n                        {\n                            \"id\": 0,\n                            \"rtp\": {\n                                \"codec\": \"PCMU\",\n                                \"rate\": 8000\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n    static talkTo(call:Call,sdp:Sdp){\n        var newHost = sdp.connection.connectionAddress;\n        var newPort = sdp.audio.port;\n        var newAddr = `${newHost}:${newPort}`;\n        if(!call.remoteSdp){\n            call.remoteSdp = sdp;\n            call.emit(\"audio:start\",newPort,newHost);\n\n        }else{\n            var oldHost = call.remoteSdp.connection.connectionAddress;\n            var oldPort = call.remoteSdp.audio.port;\n            var oldAddr = `${oldHost}:${oldPort}`;\n            call.remoteSdp = sdp;\n            if(oldAddr!=newAddr){\n                if(newHost=='0.0.0.0'||!newPort){\n                    call.emit(\"audio:stop\",oldPort,oldHost,newPort,newHost);\n                }else{\n                    call.emit(\"audio:update\",newPort,newHost,oldPort,oldHost);\n                }\n            }\n        }\n    }\n\n    static get instance():MediaServer{\n        return Object.defineProperty(this,'instance',<any>{\n            value:new MediaServer()\n        }).instance\n    }\n    private rtp:any;\n    private rtcp:any;\n    private client:any;\n\n\n    public packet:RtpPacket;\n    public enabled:boolean;\n    private get debug(){\n        return false;\n    }\n    send(message:Buffer,port:number,host:string){\n        this.rtp.send(message,0,message.length,port,host);\n    }\n    public host:string;\n    public rtpPort:number;\n    public rtcpPort:number;\n    public file:any;\n\n\n    constructor(){\n        this.enabled = false;\n        this.rtp = Node.Udp.createSocket(\"udp4\");\n        this.rtcp = Node.Udp.createSocket(\"udp4\");\n        var call:Call,pack:RtpPacket;\n        //this.file = require('fs').createWriteStream('media.txt');\n        this.rtcp.on(\"message\", (msg:Buffer, rinfo)=>{\n            //this.file.write(`RTCP ${rinfo.address} ${rinfo.port} ${msg.toString('hex')}\\n`);\n            if(this.debug) {\n                console.info('');\n                var len = RtcpPacket.getLength(msg);\n                while(len){\n                    var pkt = msg.slice(0,len);\n                    try{\n                        console.info(`RTCP(${JSON.stringify(new RtcpPacket(pkt),null,2)})`);\n                    }catch(ex){\n                        console.info(ex.stack);\n                        console.info('-- PACKET ------------');\n                        console.info(pkt.toString('hex'));\n                    }\n                    if(len<msg.length){\n                        msg = msg.slice(len);\n                        len = RtcpPacket.getLength(msg)\n                    }else{\n                        len = 0;\n                    }\n                }\n\n            }\n        });\n        this.rtp.on(\"message\", (msg, rinfo)=>{\n            //this.file.write(`RTP  ${rinfo.address} ${rinfo.port} ${msg.toString('hex')}\\n`);\n            var id = `${rinfo.address}:${rinfo.port}`;\n            if(call=MediaServer.calls[id]){\n                pack = new RtpPacket(msg);\n                call.emit(Call.EVENTS.AUDIO.RECEIVE,pack);\n                if(this.debug && false){\n                    process.stdout.write(`\\rRTP  : c:${call.id} m:${pack.marker} t:${pack.type} s:${pack.source} i:${pack.sequence} t:${pack.timestamp} d:${pack.data.length}`);\n                }\n            }\n        });\n    }\n\n    public listen(host?:string,rtpPort?:number,rtcpPort?:number):Promise<any>{\n        var detect = host?Promise.resolve(host):Util.getLocalIpAddress();\n        return detect.then((host:string)=>{\n            this.host = host;\n            this.rtpPort = rtpPort  = rtpPort||MediaServer.RTP_PORT;\n            this.rtcpPort = rtcpPort = rtcpPort||(rtpPort+1);\n            this.rtp.bind(rtpPort,host);\n            this.rtcp.bind(rtcpPort,host);\n            console.info(`LISTENING RTP:${rtpPort} / RCTP:${rtcpPort}`);\n        });\n    }\n}"
  ]
}