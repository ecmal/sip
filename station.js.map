{
  "version": 3,
  "file": "station.js",
  "sourceRoot": "/Users/Sergey/Work/GH/ecmal/sip/src",
  "sources": [
    "station.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {Emitter} from \"./events\";\nimport {Transport} from \"./transport\";\nimport {Contact} from \"./models\";\nimport {RegisterDialog} from \"./dialogs/registration\";\nimport {Request} from \"./models/message/request\";\nimport {Util} from \"./models/common/utils\";\nimport {InviteManager} from \"./dialogs/invitation\";\n\n\nexport enum State {\n    REGISTERING,\n    UNREGISTERING,\n    OFFLINE,\n    ONLINE,\n    DIALING,\n    TALKING,\n    RINGING\n}\n\nexport class Station extends Emitter {\n\n    public state:State;\n    public transport:Transport;\n    public contact:Contact;\n    public address:Contact;\n\n    public registration:RegisterDialog;\n    public calls:InviteManager;\n\n    public connected(){\n        return this.transport.connected\n    }\n\n    public get isOffline():boolean{\n        return this.state == State.OFFLINE;\n    }\n    public get isRegistered():boolean{\n        return !(this.state==State.OFFLINE || this.state == State.REGISTERING);\n    }\n    public get name(){\n        return this.contact.displayName;\n    }\n    constructor(contact:Contact|string, transport?:Transport) {\n        super();\n        this.state = State.OFFLINE;\n        this.onConnect = this.onConnect.bind(this);\n        this.onRequest = this.onRequest.bind(this);\n        this.onResponse = this.onResponse.bind(this);\n        this.setContact(contact);\n        this.setTransport(transport);\n    }\n    public setContact(contact:Contact|string):Station{\n        if(contact instanceof Contact){\n            this.contact = contact;\n        }else{\n            this.contact = new Contact(contact);\n        }\n        this.contact.tag = Util.hash(8);\n        return this;\n    }\n    public setTransport(transport:Transport):Station {\n        if(!this.transport){\n            this.transport      = <Transport>transport;\n            this.registration   = new RegisterDialog(this);\n            this.calls = new InviteManager(this);\n            this.transport.on(Transport.CONNECT,this.onConnect);\n            this.transport.on('request',this.onRequest);\n            this.transport.on('response',this.onResponse);\n        }\n        return this;\n    }\n    public register(expires=0){\n        if(expires>0){\n            this.state = State.REGISTERING;\n            return this.registration.register(expires).then(r=>{\n                this.state = this.state = State.ONLINE;\n                this.emit('register');\n            });\n        }else{\n            this.state = State.UNREGISTERING;\n            return this.registration.register(expires).then(r=>{\n                this.state = this.state = State.OFFLINE;\n                this.emit('unregister');\n            });\n        }\n    }\n    public toString(options?:any) {\n        return `Station(${this.contact.toString(options)})`;\n    }\n\n    private inspect(){\n        return this.toString({inspect: true})\n    }\n    private onConnect(){\n        this.address = new Contact(this.contact.toString());\n        this.address.uri.host = this.transport.localAddress;\n        this.address.uri.port = this.transport.localPort;\n        this.emit('connect');\n    }\n\n    private onRequest(request:Request){\n        if(request.uri.username == this.contact.uri.username){\n            this.emit('request',request);\n        }\n    }\n    private onResponse(response:Request){\n        this.emit('response',response);\n    }\n\n\n}"
  ]
}